import streamlit as st
from openai import OpenAI
cle_api = "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"

# --- PARAM√âTRAGE DES LIEUX DISPONIBLES ---
LORE_PAR_LIEU = {
    "Verdelune": """
üåø Le Village
Verdelune est un village paisible entour√© de nature, blotti entre des collines bois√©es et des champs en friche.
La vie y est simple et rythm√©e par les saisons. Les villageois se connaissent tous, et les √©trangers sont vite rep√©r√©s.
Le maire fait de son mieux pour maintenir l'ordre, m√™me si les choses semblent plus agit√©es qu‚Äôautrefois.
Personne ne quitte jamais le village. Ce n‚Äôest pas interdit, mais pourquoi le ferait-on ? Tout ce qu‚Äôil faut est ici.

üõí Le March√©
Le marchand g√©n√©raliste vend un peu de tout, mais ses prix sont √©lev√©s.
Le forgeron est connu pour ses armes solides et ses silences prolong√©s.
Le marchand magique est un peu √©trange, toujours en train de murmurer √† ses grimoires.
L‚Äôapothicaire est grincheux mais efficace, ses potions ‚Äúfont ce qu‚Äôelles doivent faire, ni plus, ni moins‚Äù.
Le ma√Ætre des familiers expose des ≈ìufs √©tranges en vitrine et parle aux b√™tes comme √† des enfants.
Le colporteur de rumeurs aime jaser, souvent contre quelques pi√®ces.
Les artisans du march√© respectent une routine stricte, et ferment tous d√®s que le soleil d√©cline.

üçª La Taverne
Le tavernier accueille les voyageurs sans poser trop de questions, mais garde l‚Äô≈ìil ouvert.
Il se plaint souvent de bruits dans sa cave, surtout la nuit. Des pas, des grattements‚Ä¶ mais aucun client ne veut y descendre.
Les habitu√©s aiment discuter autour d‚Äôun verre. Les bras de fer et les paris sont monnaie courante.

üå≤ Les Abords de la For√™t
Au nord du village commence une for√™t dense, sombre et silencieuse, que les villageois √©vitent.
On dit que ceux qui s‚Äôy aventurent ne reviennent pas toujours.
Des cr√©atures √©tranges y r√¥dent ‚Äî certaines fuient le regard, d‚Äôautres s‚Äôen nourrissent.
Le chant des oiseaux y est parfois remplac√© par des √©chos qu‚Äôon ne reconna√Æt pas.

üìö Histoire et M√©moire
Verdelune fut autrefois un lieu de passage pour les voyageurs et les marchands itin√©rants, mais ces temps-l√† semblent r√©volus.
Certains anciens parlent de vieilles pierres au fond de la for√™t, recouvertes de mousse et de symboles oubli√©s.
Le cimeti√®re du village est ancien, et certains noms sur les pierres tombales sont effac√©s par le temps.
Les villageois respectent les traditions, m√™me s‚Äôils ont oubli√© leur origine.
"""
}

# --- FONCTIONS ---
def make_prompt(description, place, quete):
    context = LORE_PAR_LIEU.get(place, "")
    return f"""Tu es un g√©n√©rateur de fiches de personnages non-joueurs (PNJ) pour un jeu de r√¥le heroic-fantasy.
√Ä partir de quelques informations, tu dois cr√©er un PNJ cr√©dible, original et utilisable directement dans une partie de jeu de r√¥le.
Le personnage doit s‚Äôint√©grer naturellement dans un univers de fantasy m√©di√©vale (type heroic-fantasy), avec des √©l√©ments de contexte qui le rendent vivant et int√©ressant √† interpr√©ter.

La fiche personnage doit inclure les √©l√©ments suivants¬†:

1. Nom : un nom coh√©rent avec le genre fantasy, optionnellement un surnom li√© √† sa r√©putation, ses traits ou son histoire.
2. Fonction / M√©tier : le r√¥le qu‚Äôil occupe dans la soci√©t√© ou son activit√© principale.
3. Caract√®re / Temp√©rament / Patience : un r√©sum√© de sa psychologie, de son comportement social, de son seuil de tol√©rance ou de son impulsivit√©.
4. Apparence : description de son allure g√©n√©rale, ses traits distinctifs, sa tenue vestimentaire.
5. Voix : timbre, accent, mani√®re de s‚Äôexprimer, tics de langage √©ventuels.
6. N√©gociation / Qu√™te : (optionnel)
   - Son ouverture √† la discussion ou √† la n√©gociation/corruption.
   - Ce qu‚Äôil recherche ou d√©sire en ce moment.
   - Une qu√™te ou un service qu‚Äôil pourrait confier aux joueurs.
   - Ce qu‚Äôil offre en √©change : objets, informations, faveurs, argent, etc.

Sois clair, immersif et inspire-toi du style des ma√Ætres de jeu. Chaque fiche doit pouvoir √™tre lue ou jou√©e telle quelle, sans modification n√©cessaire.

Contexte¬†: {context}
Lieu d‚Äôancrage du PNJ¬†: {place}
Description du PNJ¬†: {description}
Quete ou service √† confier¬†: {'Oui' if quete else 'Non'}
"""

def make_suffix():
    return """Informations suppl√©mentaires :
Commence la conversation par un silence ("...") pour laisser les joueurs parler en premier.
"""

def make_prefix():
    return f"""Tu incarnes le PNJ d√©crit dans la fiche ci-dessous.
Tu vas dialoguer avec un joueur dans le cadre d‚Äôun jeu de r√¥le heroic-fantasy.
Reste strictement dans ton r√¥le, comme si tu √©tais ce personnage r√©el.

Consignes de style :
Ne commence jamais ton texte par le nom du personnage.
√âvite les didascalies (actions entre parenth√®ses ou hors r√¥le).
Privil√©gie des r√©pliques naturelles, interactives, jamais de longs monologues.
Parle comme le ferait ce personnage, en fonction de sa personnalit√©, de sa voix, et de ses intentions.

L‚Äôobjectif est de maintenir une immersion totale pour le joueur.
"""

# --- INTERFACE STREAMLIT ---
st.title("üßë‚Äçüåæ G√©n√©rateur de fiches PNJ")

with st.form("pnj_form"):
    desc = st.text_area("D√©cris bri√®vement ton PNJ (r√¥le, personnalit√©, d√©tail, etc.)", max_chars=350, height=100)
    lieu = st.selectbox("Lieu de vie du PNJ", LORE_PAR_LIEU.keys())
    # Optionnel : ajouter un bouton checkbox pour inclure une qu√™te ou non
    quete = st.checkbox("Inclure une qu√™te ou un service √† confier aux joueurs ?")
    submit = st.form_submit_button("G√©n√©rer la fiche PNJ !")

if submit and desc.strip():
    prompt = make_prompt(desc, lieu, quete)
    prefix = make_prefix()
    suffix = make_suffix()

    with st.spinner("G√©n√©ration de la fiche PNJ en cours..."):
        # OpenAI API call
        client = OpenAI(api_key=cle_api)
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "Tu es un g√©n√©rateur de fiches PNJ pour un JDR heroic-fantasy."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=900,
            temperature=1,
            top_p=1
        )
        fiche = response.choices[0].message.content

    st.markdown("### R√©sultat de la fiche personnage g√©n√©r√©e :")
    st.code(f"{prefix}\n---\n{fiche}\n---\n{suffix}", language="markdown")

elif submit:
    st.warning("Merci de d√©crire ton PNJ avant de lancer la g√©n√©ration.")

st.markdown("---")

import datetime
import json
import os

HISTO_PATH = "historique_pnj.json"

# Charger l'historique depuis le fichier au d√©marrage
def load_history():
    if os.path.exists(HISTO_PATH):
        with open(HISTO_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# Sauvegarder l'historique dans le fichier
def save_history(history):
    with open(HISTO_PATH, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

# Charger en session_state si ce n'est pas d√©j√† fait
if "pnj_history" not in st.session_state:
    st.session_state.pnj_history = load_history()

# Lorsqu‚Äôon g√©n√®re, on enregistre le prompt complet dans l‚Äôhistorique et dans le fichier
if submit and desc.strip():
    full_prompt = f"{prefix}\n---\n{fiche}\n---\n{suffix}"
    history_title = fiche[:40].replace("\n", " ").replace("  ", " ") + "..."
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_entry = {
        "title": history_title,
        "datetime": timestamp,
        "prompt": full_prompt,
    }
    st.session_state.pnj_history.append(new_entry)
    save_history(st.session_state.pnj_history)  # On sauvegarde apr√®s ajout

# Affichage de l'historique
if st.session_state.pnj_history:
    st.markdown("### Historique des prompts g√©n√©r√©s")

    for i, entry in enumerate(st.session_state.pnj_history):
        with st.expander(f"{entry['title']})", expanded=False):
            st.markdown("#### Prompt complet")
            st.code(entry["prompt"], language="markdown")

            
            if st.button("Supprimer ce prompt", key=f"delete_{i}"):
                st.session_state.pnj_history.pop(i)
                save_history(st.session_state.pnj_history)
                st.rerun()